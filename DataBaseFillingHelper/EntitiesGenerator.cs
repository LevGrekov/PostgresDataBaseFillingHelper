using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataBaseFillingHelper
{
    public class EntitiesGenerator
    {
        private int clients;
        private int reviews;
        private int products;
        private int anorders;

        private Random random = new Random();

        //Вспомогательные функции
        private static void Shuffle<T>(IList<T> list)
        {
            Random rng = new Random();
            int n = list.Count;
            while (n > 1)
            {
                n--;
                int k = rng.Next(n + 1);
                T value = list[k];
                list[k] = list[n];
                list[n] = value;
            }
        }
        private static string Transliterate(string russianText)
        {
            Dictionary<char, string> translitMap = new Dictionary<char, string> {
            {'а', "a"}, {'б', "b"}, {'в', "v"}, {'г', "g"}, {'д', "d"}, {'е', "e"}, {'ё', "yo"}, {'ж', "zh"},
            {'з', "z"}, {'и', "i"}, {'й', "y"}, {'к', "k"}, {'л', "l"}, {'м', "m"}, {'н', "n"}, {'о', "o"},
            {'п', "p"}, {'р', "r"}, {'с', "s"}, {'т', "t"}, {'у', "u"}, {'ф', "f"}, {'х', "h"}, {'ц', "ts"},
            {'ч', "ch"}, {'ш', "sh"}, {'щ', "sch"}, {'ъ', ""}, {'ы', "y"}, {'ь', ""}, {'э', "e"}, {'ю', "yu"},
            {'я', "ya"}, {'А', "A"}, {'Б', "B"}, {'В', "V"}, {'Г', "G"}, {'Д', "D"}, {'Е', "E"}, {'Ё', "Yo"},
            {'Ж', "Zh"}, {'З', "Z"}, {'И', "I"}, {'Й', "Y"}, {'К', "K"}, {'Л', "L"}, {'М', "M"}, {'Н', "N"},
            {'О', "O"}, {'П', "P"}, {'Р', "R"}, {'С', "S"}, {'Т', "T"}, {'У', "U"}, {'Ф', "F"}, {'Х', "H"},
            {'Ц', "Ts"}, {'Ч', "Ch"}, {'Ш', "Sh"}, {'Щ', "Sch"}, {'Ъ', ""}, {'Ы', "Y"}, {'Ь', ""}, {'Э', "E"},
            {'Ю', "Yu"}, {'Я', "Ya"}
             };
            StringBuilder transliterated = new StringBuilder();
            foreach (char c in russianText)
            {
                if (translitMap.ContainsKey(c))
                {
                    transliterated.Append(translitMap[c]);
                }
                else
                {
                    transliterated.Append(c);
                }
            }
            return transliterated.ToString();
        }
        private string GenerateRandomEmail(string FirstName,string LastName)
        {
            string[] domains =
        {
            "gmail.com", "yahoo.com", "hotmail.com", "outlook.com",
            "protonmail.com", "mail.ru", "icloud.com", "yandex.ru",
            "yandex.kz", "live.com", "zoho.com", "gmx.com", "inbox.ru",
            "fastmail.com", "tutanota.com", "mailinator.com"
        };
            StringBuilder sb = new StringBuilder();
            switch (random.Next(2))
            {
                case 0:
                    sb.Append(Transliterate(FirstName).ToLower());
                    break;
                case 1:
                    sb.Append(Transliterate(FirstName).ToUpper());
                    break;
            }
            
            switch (random.Next(4))
            {
                case 0:
                    sb.Append(".");
                    break;
                case 1:
                    sb.Append("_");
                    break;
                case 2:
                    sb.Append("");
                    break;
                case 3:
                    sb.Append("__");
                    break;
            }

            switch (random.Next(2))
            {
                case 0:
                    sb.Append(Transliterate(LastName).ToLower());
                    break;
                case 1:
                    sb.Append(Transliterate(LastName).ToUpper());
                    break;
            }
           


            if (random.Next(6)<=4)
            {
                sb.Append(random.Next(0, 9999));
            }

            sb.Append("@");
            sb.Append(domains[random.Next(domains.Length)]);

            return sb.ToString();
        }
        private string? GenerateRandomPhoneNumber()
        {
            string[] phonePrefixes = { "+380", "+375", "+996", "+993", "+992", "+998", "+994" };
            int posibility = random.Next(105);
            StringBuilder phoneNumber = new StringBuilder();
            if (posibility > 100) return null;
            if (posibility < 85)
            { // 90% of the time, generate a Russian phone number
                phoneNumber.Append("+7 "); // Russia's country code
            }
            else
            {
                phoneNumber.Append(phonePrefixes[random.Next(phonePrefixes.Length)] + " ");
            }
            phoneNumber.Append("");
            for (int i = 0; i < 3; i++)
            {
                phoneNumber.Append(random.Next(10));
            }
            phoneNumber.Append("(");
            for (int i = 0; i < 3; i++)
            {
                phoneNumber.Append(random.Next(10));
            }
            phoneNumber.Append(")");
            for (int i = 0; i < 2; i++)
            {
                phoneNumber.Append(random.Next(10));
            }
            phoneNumber.Append("-");
            for (int i = 0; i < 2; i++)
            {
                phoneNumber.Append(random.Next(10));
            }
            return phoneNumber.ToString();
        }
        private string GenerateRandomPassword()
        {
            int length = random.Next(8, 25);
            const string alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!+-?";
            StringBuilder password = new StringBuilder(length);
            for (int i = 0; i < length; i++)
            {
                int index = random.Next(alphabet.Length);
                password.Append(alphabet[index]);
            }
            return password.ToString();
        }
        private DateTime? GenerateRandomDateTime(bool CanBeNull = false)
        {
            // Получаем текущую дату и время
            DateTime now = DateTime.Now;

            // Задаем границы для генерации случайной даты и времени
            DateTime start = new DateTime(2000, 1, 1);
            int range = (now - start).Days;

            // Генерируем случайное количество дней от начала года 2000 до сегодняшнего дня
            int days = new Random().Next(range);

            // Создаем случайную дату, добавляя случайное количество дней к начальной дате
            DateTime randomDate = start.AddDays(days);

            // Генерируем случайное время
            int hours = new Random().Next(24);
            int minutes = new Random().Next(60);
            int seconds = new Random().Next(60);
            TimeSpan randomTime = new TimeSpan(hours, minutes, seconds);

            // Объединяем случайную дату и время в единый объект DateTime
            DateTime randomDateTime = randomDate + randomTime;

            // Если CanBeNull == true, то с вероятностью 20% возвращаем null
            if (CanBeNull && new Random().Next(100) < 20)
            {
                return null;
            }
            else
            {
                return randomDateTime;
            }
        }
        private string GenerateFirstName(bool isFemale = false)
        {
            string[] MaleNames = new string[]
        {
        "Мухаммед","Абдулла", "Абрам", "Адам", "Азамат", "Айдар", "Айрат", "Аким", "Алан", "Александр", "Алексей",
        "Али", "Алим", "Алихан", "Альберт", "Амир", "Анатолий", "Анвар", "Андрей", "Анис", "Антон",
        "Арам", "Аристарх", "Аркадий", "Арсен", "Арсений", "Арслан", "Артем", "Артур", "Архип", "Аскар",
        "Аскольд", "Асхат", "Ахмет", "Ашот", "Байрам", "Бакир", "Богдан", "Борис", "Булат", "Вадим",
        "Валентин", "Валерий", "Василий", "Викентий", "Виктор", "Вилли", "Виталий", "Влад", "Владимир", "Владислав",
        "Вольдемар", "Всеволод", "Гавриил", "Геннадий", "Георгий", "Герасим", "Глеб", "Гордей", "Григорий", "Густав",
        "Давид", "Дамир", "Даниил", "Данислав", "Демид", "Демьян", "Денис", "Джамал", "Джеймс", "Джек",
        "Джозеф", "Джон", "Джордан", "Джордж", "Димитрий", "Динар", "Дмитрий", "Добрыня", "Донат", "Донатос",
        "Евгений", "Егор", "Елисей", "Емельян", "Еремей", "Ермак", "Ерофей", "Ефим", "Жан", "Ждан",
        "Захар", "Заур", "Захид", "Зенон", "Зигмунд", "Зиновий", "Зуфар", "Ибрагим", "Иван", "Игнат",
        "Игорь", "Измаил", "Израиль", "Иларион", "Ильгар", "Ильдар", "Ильнур", "Ильшат", "Имран", "Иннокентий",
        "Ираклий", "Иса", "Исай", "Исак", "Ислам", "Исмаил", "Казбек", "Камиль", "Карен", "Карим",
        "Карлос","Касим", "Ким", "Кирилл", "Клим", "Константин", "Кузьма", "Лев", "Леонид", "Лука", "Лукьян",
        "Магомед", "Маджид", "Майкл", "Макар", "Максим", "Марат", "Марк", "Марсель", "Матвей", "Мирон",
        "Мирослав", "Михаил", "Мурат", "Назар", "Назарий", "Наиль", "Нариман", "Наум", "Нестор", "Никита",
        "Никодим", "Николай", "Нил", "Олег", "Орест", "Осип", "Остап", "Павел", "Петр", "Платон",
        "Потап", "Прохор", "Равиль", "Радик", "Радомир", "Раиль", "Райан", "Рамиль", "Рамазан", "Расим",
        "Ратмир", "Рауль", "Регинальд", "Ренат", "Ринат", "Роберт", "Родион", "Роман", "Ростислав", "Руслан",
        "Рустам", "Савва", "Салават", "Самир", "Святослав", "Семен", "Сергей", "Сидор", "Соломон", "Станислав",
        "Степан", "Султан", "Тагир", "Тайлер", "Талгат", "Тамерлан", "Тарас", "Тарик", "Теймур", "Терентий",
        "Тигран", "Тимофей", "Тимур", "Тихон", "Томас", "Трофим", "Ульманас", "Умар", "Устин", "Фарид",
        "Федор", "Феликс", "Фидель", "Филипп", "Флорентий", "Франц", "Хабиб", "Хаким", "Халид", "Харитон",
        "Хасан", "Хенрик", "Христофор", "Цезарь", "Чингис", "Чудомир", "Шамиль", "Эдгар", "Эдуард", "Эльдар",
        "Эмиль", "Эрик", "Эрнест", "Юлиан", "Юлий", "Юрий", "Яков", "Ян", "Ярослав"
        };
            string[] FemaleNames = new string[]
        {
           "Амиля", "Аделина", "Аделя", "Азалия", "Азиза", "Айгуль", "Айзат", "Айлин", "Айнагуль", "Айназ", "Айнур",
    "Айсель", "Айсылу", "Аксинья", "Алевтина", "Александра", "Алина", "Алира", "Алиса", "Алия", "Алла",
    "Альбина", "Альфия", "Амина", "Амират", "Анастасия", "Ангелина", "Анжела", "Анжелика", "Анисья", "Анита",
    "Анна", "Антонина", "Анфиса", "Арина", "Ася", "Белла", "Богдана", "Борислава", "Валентина", "Валерия",
    "Варвара", "Василиса", "Вера", "Вероника", "Виктория", "Галина", "Гузель", "Дана", "Дания", "Дарина",
    "Дарья", "Джамиля", "Диана", "Дильназ", "Ева", "Евгения", "Екатерина", "Елена", "Елизавета", "Жанна",
    "Загита", "Заира", "Залина", "Зарема", "Зарина", "Земфира", "Зинаида", "Злата", "Зоя", "Иветта",
    "Изабелла", "Изольда", "Илария", "Илина", "Илияна", "Илона", "Ильзира", "Ильнара", "Инга", "Индира",
    "Инесса", "Инна", "Иоанна", "Ираида", "Ирина", "Искра", "Йолдыз", "Камила", "Карима", "Карина",
    "Кира", "Клавдия", "Ксения", "Лада", "Лайла", "Лали", "Лана", "Лариса", "Лаура", "Лейла",
    "Лейсан", "Лена", "Леонида", "Леся", "Лидия", "Лилиана", "Лилия", "Лина", "Лира", "Лия",
    "Лолита", "Луиза", "Лукарья", "Любава", "Любовь", "Людмила", "Магдалина", "Мадина", "Майя", "Малика",
    "Маргарита","Мариам", "Марина", "Мария", "Марсель", "Марта", "Матильда", "Махабат", "Махалия", "Милана", "Милена",
"Милица", "Мира", "Мирра", "Мирослава", "Муза", "Муслима", "Надежда", "Назгуль", "Назира", "Назия",
"Наиля", "Наталья", "Нелли", "Нефиса", "Нигина", "Ника", "Нина", "Нинель", "Ниязи", "Нонна",
"Нурия", "Оксана", "Олеся", "Ольга", "Офелия", "Павла", "Пелагея", "Полина", "Прасковья", "Рада",
"Радмила", "Радмира", "Раиса", "Рамина", "Регина", "Резеда", "Римма", "Рита", "Роза", "Роксана",
"Рузалина", "Рузанна", "Рузиля", "Руслана", "Рустама", "Сабина", "Сабрина", "Саида", "Самира", "Сандугаш",
"Светлана", "Северина", "Серафима", "Сильва", "Сима", "Снежана", "Софья", "Стелла", "Сусанна", "Таисия",
"Тамила", "Тамара", "Татьяна", "Ульяна", "Ума", "Умайма", "Умида", "Умит", "Унес", "Уница",
"Урания", "Урсула", "Усия", "Устина", "Фарида", "Фаузия", "Фаяза", "Феруза", "Фируза", "Флора",
"Франческа", "Фуада", "Хадижа", "Ханна", "Харита", "Хатидже", "Хатима", "Хильда", "Хория", "Христина",
"Цаганат", "Цветана", "Целестина", "Цилла", "Чулпан", "Шаке", "Шамиля", "Шахназ", "Шахноза", "Шахразад",
"Шахристан", "Ширин", "Эвелина", "Эдита", "Эзмира", "Элеонора", "Элина", "Элинора", "Эльвина", "Эльгия", "Эльза",
"Эльмира", "Эльнара", "Эльфира", "Эмилия", "Эмма","Эндже", "Эрика", "Эсмира", "Юлиана", "Юлия", "Юния", "Юнона", "Юрия", "Ягута", "Яна",
"Янина", "Ярослава" };
            if (isFemale)
            {
                return FemaleNames[random.Next(FemaleNames.Length)];
            }
            else
            {
                return MaleNames[random.Next(MaleNames.Length)];
            }
        }
        private string GenerateSurname(bool isFemale = false)
        {
            string[] Surnames = new string[]
{"Ёлкин","Греков","Абдрахманов","Велитов","Вагин","Чекашов","Шманатов","Суин","Лосев","Ишмякевич","Марьин","Сакдеев","Гумеров","Арсланов","Маклецов","Першагин","Абдуллин", "Абрамов", "Авдеев", "Агафонов", "Азаров", "Айвазов", "Айдаров", "Акбулатов", "Акимов", "Аксёнов",
    "Александров", "Алексеев", "Андреев", "Анисимов", "Антонов", "Ануфриев", "Артёмов", "Архипов", "Афанасьев", "Бабушкин",
    "Баранов", "Барсуков", "Бахтин", "Безруков", "Беликов", "Белов", "Беляев", "Березин", "Бирюков", "Блинов",
    "Богданов", "Болдырев", "Борисов", "Бочаров", "Бугаев", "Булгаков", "Булатов", "Бурков", "Быков", "Вавилов",
    "Васильев", "Веселов", "Виноградов", "Вишняков", "Владимиров", "Власов", "Волков", "Воробьев", "Воронин", "Воронов",
    "Высоцкий", "Гаврилов", "Галкин", "Герасимов", "Голубев", "Гончаров", "Горбачёв", "Гордеев", "Горшков", "Григорьев",
    "Громов", "Гуляев", "Гурьев", "Гусев", "Давыдов", "Данилов", "Демидов", "Денисов", "Дмитриев", "Добронравов",
    "Дорофеев", "Дроздов", "Дьячков", "Евдокимов", "Евсеев", "Егоров", "Елисеев", "Емельянов", "Ермаков", "Ершов",
    "Ефимов", "Жарков", "Жданов", "Жуков", "Зайцев", "Захаров", "Зверев", "Зеленский", "Зимин", "Зиновьев",
    "Зуев", "Иванов", "Игнатов", "Ильин", "Исаев", "Исмагилов", "Казанцев", "Калинин", "Карпов", "Кириллов",
    "Киселёв", "Князев", "Ковалев", "Козлов", "Колесников", "Колобов", "Комаров", "Коновалов", "Константинов", "Копылов", "Корнеев", "Королёв", "Коротков", "Косарев", "Костин", "Котов", "Кошелев",
"Кравцов", "Красильников", "Крылов", "Крюков", "Кудрявцев", "Кузнецов", "Кузьмин", "Кулагин", "Кулаков", "Куликов",
"Куприянов", "Курганов", "Курочкин", "Кутузов", "Лаврентьев", "Лазарев", "Лапин", "Ларионов", "Лебедев", "Леонидов",
"Лихачев", "Лобанов", "Логинов", "Лукин", "Лыткин", "Львов", "Макаров", "Максимов", "Мамедов", "Марков",
"Мартынов", "Маслов", "Матвеев", "Медведев", "Мельников", "Меркушев", "Миронов", "Михайлов", "Михеев", "Моисеев",
"Молчанов", "Морозов", "Муравьев", "Мухаметзянов", "Мышкин", "Назаров", "Наумов", "Некрасов", "Никитин", "Никулин",
"Новиков", "Носков", "Нурмагомедов", "Обухов", "Овчинников", "Одинцов", "Орлов", "Осипов", "Павлов", "Панарин",
"Панфилов", "Пахомов", "Петров", "Петухов", "Поляков", "Пономарёв", "Попов", "Потапов", "Прокофьев", "Пугачёв",
"Путилов", "Разин", "Родионов", "Романов", "Русаков", "Рябов", "Савельев", "Сазонов", "Самсонов", "Сафронов",
"Свиридов", "Севастьянов", "Седов", "Селезнёв", "Селиванов", "Семёнов", "Сергеев", "Сидоров", "Силин", "Синицын",
"Ситников", "Смирнов", "Соболев", "Соколов", "Соловьёв", "Сорокин", "Сосновский", "Степанов", "Стрелков", "Субботин",
"Суворов", "Суслов", "Сысоев", "Тарасов", "Терентьев", "Тимофеев","Тихонов", "Титов", "Тихомиров", "Ткачев", "Токарев", "Толмачёв", "Третьяков", "Трифонов", "Трофимов", "Туров",
"Тюменцев", "Уваров", "Ульянов", "Успенский", "Ушаков", "Фадеев", "Федоров", "Федосеев", "Федотов", "Филатов",
"Филиппов", "Фокин", "Фомин", "Фомичев", "Фурсов", "Харитонов", "Хлебников", "Храмов", "Худяков", "Цветков",
"Цыганов", "Цыплаков", "Черемных", "Чернов", "Чернышев", "Черняев", "Чистяков", "Чумаков", "Шарапов", "Шашков",
"Шестаков", "Шилов", "Широков", "Шубин", "Щербаков", "Щукин", "Эрнст", "Юдин", "Юрьев", "Яковлев", "Якушев",
"Яромеев", "Ясенев", "Ященко"};
            if (isFemale)
            {
                return Surnames[random.Next(Surnames.Length)] + 'а';
            }
            else
            {
                return Surnames[random.Next(Surnames.Length)];
            }
        }

        //Генераторы списков 
        private List<Category> GenerateCategories()
        {
            var categories = new List<Category>();
            string[] categoriesNames =
            {
                "appliances","food","clothes","stationery","cosmetics","furniture","toys","jewelry","sportingGoods","healthProducts"
            };
            for (int i = 0; i < categoriesNames.Length; i++)
            {
                var category = new Category();
                category.Name = categoriesNames[i];
                categories.Add(category);
            }
            return categories;
        }
        private List<Client> GenerateClients(int amount)
        {

            List<Client> clients = new List<Client>();
            var Elkin = new Client() { FirstName = "Иван", LastName = "Ёлкин", Email = GenerateRandomEmail("Иван", "Ёлкин"), Password = GenerateRandomPassword(), PhoneNumber = GenerateRandomPhoneNumber() };
            var Amilya = new Client() { FirstName = "Амиля", LastName = "Велитова", Email = "velitova03@gmail.ru", Password = "02072003", PhoneNumber = "+7 906(145)78-55" };
            var Bulat = new Client() { FirstName = "Булат", LastName = "Абдрахманов", Email = GenerateRandomEmail("Булат", "Абдрахманов"), Password = GenerateRandomPassword(), PhoneNumber = "+7 967 463 6953" };
            var Lev = new Client() { FirstName = "Лев", LastName = "Греков", Email = "levgrekov@mail.ru", Password = "02072003", PhoneNumber = "+7 999(470)12-00" };



            for (int i = 0; i < amount-4; i++)
            {
                Client client = new Client();
                if (random.Next(0, 2) == 1)
                {
                    client.FirstName = GenerateFirstName();
                    client.LastName = GenerateSurname();
                }
                else
                {
                    client.FirstName = GenerateFirstName(true);
                    client.LastName = GenerateSurname(true);
                }
                client.Email = GenerateRandomEmail(client.FirstName,client.LastName);
                client.PhoneNumber = GenerateRandomPhoneNumber();
                client.Password = GenerateRandomPassword();

                clients.Add(client);
            }
            clients.Add(Elkin);
            clients.Add(Amilya);
            clients.Add(Bulat);
            clients.Add(Lev);
            this.clients = clients.Count;
            return clients;
        }
        private List<Product> GenerateProducts()
        {
            string[] appliances = new string[] {
    "Холодильник",
    "Пылесос",
    "Стиральная машина",
    "Микроволновка",
    "Посудомоечная машина",
    "Кофемашина",
    "Фен",
    "Утюг",
    "Блендер",
    "Электрический чайник",
    "Тостер",
    "Электрическая плита",
    "Духовой шкаф",
    "Кухонный комбайн",
    "Мясорубка",
    "Соковыжималка",
    "Электрическая зубная щетка",
    "Оконный кондиционер",
    "Настенный кондиционер",
    "Вентилятор",
    "Обогреватель",
    "Электрическая духовка",
    "Паровая станция",
    "Швейная машина",
    "Вытяжка",
    "Варочная панель",
    "Хлебопечка",
    "Йогуртница",
    "Мультиварка",
    "Электрический гриль",
    "Мини-печь",
    "Конвекционная печь",
    "Электрочайник",
    "Барбекю-гриль",
    "Печь-гриль",
    "Вертикальный парогенератор",
    "Электроплита",
    "Морозильник",
    "Холодильник с морозильной камерой",
    "Холодильник для вина",
    "Кофемолка",
    "Мясоперерабатывающее оборудование",
    "Мультипекарь",
    "Электронож",
    "Мультистайлер",
    "Фритюрница",
    "Электрошашлычница",
    "Электрический барбекю",
    "Варочный котел",
    "Термос",
    "Кофеварка капельного типа",
};
            string[] food = new string[] {
    "Яблоки",
    "Бананы",
    "Апельсины",
    "Мандарины",
    "Виноград",
    "Груши",
    "Персики",
    "Абрикосы",
    "Сливы",
    "Клубника",
    "Малина",
    "Черника",
    "Голубика",
    "Арбуз",
    "Дыня",
    "Ананас",
    "Киви",
    "Гранат",
    "Лимон",
    "Лайм",
    "Манго",
    "Авокадо",
    "Артишок",
    "Брокколи",
    "Морковь",
    "Свекла",
    "Капуста",
    "Лук",
    "Чеснок",
    "Перец",
    "Томаты",
    "Огурцы",
    "Салат",
    "Редис",
    "Редька",
    "Шпинат",
    "Картофель",
    "Кукуруза",
    "Рис",
    "Пшено",
    "Гречка",
    "Овсянка",
    "Макароны",
    "Хлеб",
    "Булочки",
    "Кексы",
    "Печенье",
    "Шоколад",
    "Конфеты",
    "Мороженое",
    "Курица",
    "Говядина",
    "Свинина",
    "Рыба"
};
            string[] clothes = new string[] {
    "Футболка",
    "Рубашка",
    "Блузка",
    "Кофта",
    "Джемпер",
    "Свитер",
    "Пиджак",
    "Пальто",
    "Куртка",
    "Жилет",
    "Джинсы",
    "Брюки",
    "Шорты",
    "Юбка",
    "Платье",
    "Костюм",
    "Бикини",
    "Купальник",
    "Ботинки",
    "Кроссовки",
    "Туфли",
    "Сапоги",
    "Туфли на каблуке",
    "Тапки",
    "Шлепки",
    "Бейсболка",
    "Шапка",
    "Шарф",
    "Перчатки",
    "Носки",
    "Колготки",
    "Пояс",
    "Галстук",
    "Галстук-бабочка",
    "Платок",
    "Кошелек",
    "Сумка",
    "Рюкзак",
    "Чемодан",
    "Перчатки для вождения",
    "Подтяжки",
    "Рубашка в клетку",
    "Футболка с принтом",
    "Джинсы скинни",
    "Спортивные штаны",
    "Джинсовая куртка",
    "Шорты-бермуды",
    "Шляпа",
    "Пальто-парка",
    "Кардиган",
    "Свитшот",
    "Футболка-поло"
};
            string[] stationery = new string[] {
    "Ручка шариковая",
    "Ручка гелевая",
    "Карандаш",
    "Цветные карандаши",
    "Фломастеры",
    "Кисточки для живописи",
    "Маркер",
    "Ластик",
    "Точилка",
    "Ножницы",
    "Клей",
    "Степлер",
    "Степлерная скоба",
    "Листы бумаги А4",
    "Блокнот",
    "Тетрадь",
    "Дневник",
    "Ежедневник",
    "Календарь",
    "Скрепки",
    "Булавки",
    "Закладки",
    "Линейка",
    "Угольник",
    "Транспортир",
    "Геометрический набор",
    "Карманный калькулятор",
    "Пластиковые папки",
    "Бумажные папки",
    "Папка-регистратор",
    "Пенал",
    "Конверты",
    "Корректор",
    "Стержень для ручки",
    "Бейдж",
    "Печатная машинка",
    "Бумажные стаканчики",
    "Скотч",
    "Клейкая лента",
    "Магнитная доска",
    "Магниты",
    "Маркер для доски",
    "Подставка для канцелярских принадлежностей",
    "Карманный органайзер",
    "Офисная бумага",
    "Планинг-доска",
    "Этикетки",
    "Стреп-пакеты",
    "Расходные материалы для принтера"
};
            string[] cosmetics = new string[] {
    "Тональный крем",
    "Консилер",
    "Пудра",
    "Бронзер",
    "Румяна",
    "Хайлайтер",
    "База под макияж",
    "Фиксатор макияжа",
    "Карандаш для бровей",
    "Гель для бровей",
    "Тени для век",
    "Тушь для ресниц",
    "Подводка для глаз",
    "Карандаш для глаз",
    "Карандаш для губ",
    "Помада",
    "Блеск для губ",
    "Уход за кожей лица (крем, лосьон, гель для умывания и т.д.)",
    "Уход за кожей вокруг глаз",
    "Маска для лица",
    "Скраб для лица",
    "Очищающее средство для лица",
    "Средство для снятия макияжа",
    "Уход за губами (бальзам, скраб, масло)",
    "Уход за волосами (шампунь, кондиционер, маска, сыворотка)",
    "Гель для укладки волос",
    "Воск для укладки волос",
    "Лак для волос",
    "Укладочный спрей",
    "Средство для термозащиты волос",
    "Мусс для укладки волос",
    "Средство для придания объема волосам",
    "Средство для придания блеска волосам",
    "Средство для укрепления ногтей",
    "Лак для ногтей",
    "База под лак для ногтей",
    "Топ-покрытие для ногтей",
    "Средство для снятия лака для ногтей",
    "Дезодорант",
    "Гель для душа",
    "Шампунь для тела",
    "Крем для тела",
    "Средство для ухода за руками и ногтями",
    "Массажное масло",
    "Ароматическое масло",
    "Духи",
    "Туалетная вода"
};
            string[] furniture = new string[] {
    "Диван",
    "Кровать",
    "Шкаф-купе",
    "Комод",
    "Стол",
    "Стул",
    "Кресло",
    "Полка",
    "Тумбочка",
    "Пуф",
    "Стеллаж",
    "Витрина",
    "Банкетка",
    "Кухонный гарнитур",
    "Обеденный стол",
    "Обеденный стул",
    "Детская кровать",
    "Детский стол",
    "Детский стул",
    "Детский шкаф",
    "Детская полка",
    "Компьютерный стол",
    "Книжный шкаф",
    "Офисный стол",
    "Офисный кресло",
    "Кабинет",
    "Консольный стол",
    "Письменный стол",
    "Компьютерная тумбочка",
    "Журнальный столик",
    "Табурет",
    "Барный стул",
    "Кушетка",
    "Секция для гостиной",
    "Угловой диван",
    "Матрас",
    "Набор мебели для спальни",
    "Набор мебели для гостиной",
    "Набор мебели для кухни",
    "Корпусная мебель",
    "Мягкая мебель",
    "Спальный гарнитур",
    "Рабочее кресло",
    "Мебель для ванной комнаты",
    "Душевая кабина",
    "Ванна",
    "Умывальник",
    "Тумба для ванной комнаты",
    "Зеркало для ванной комнаты",
    "Трюмо",
    "Шезлонг"
};
            string[] toys = new string[] {
    "Кукла",
    "Машинка",
    "Мяч",
    "Конструктор",
    "Пазл",
    "Карточная игра",
    "Настольная игра",
    "Книжка-раскраска",
    "Плюшевый мишка",
    "Игровой набор",
    "Детская кухня",
    "Колесный конструктор",
    "Радиоуправляемый автомобиль",
    "Самолетик",
    "Трансформер",
    "Фигурка героя",
    "Кубики с буквами",
    "Кубики с цифрами",
    "Набор маркеров",
    "Набор красок",
    "Набор фломастеров",
    "Набор карандашей",
    "Доска для рисования",
    "Магнитный конструктор",
    "Домик для кукол",
    "Мячик для баскетбола",
    "Мячик для футбола",
    "Мячик для волейбола",
    "Скакалка",
    "Ролики",
    "Коньки",
    "Самокат",
    "Велосипед",
    "Лего",
    "Музыкальный инструмент",
    "Набор космических игрушек",
    "Набор инструментов",
    "Развивающая игрушка",
    "Набор для рисования",
    "Робот-трансформер",
    "Супергеройский костюм",
    "Микроскоп",
    "Телескоп",
    "Комплект мячей для настольного тенниса",
    "Комплект мячей для бильярда",
    "Ракетка для настольного тенниса",
    "Бильярдный кий"
};
            string[] jewelry = new string[] {
    "Золотое кольцо",
    "Серебряные серьги",
    "Браслет из жемчуга",
    "Кулон с бриллиантом",
    "Подвеска из белого золота",
    "Серебряное кольцо",
    "Колье с жемчугом",
    "Кольцо с сапфиром",
    "Браслет из розового золота",
    "Серьги-гвоздики с изумрудом",
    "Золотые серьги-пусеты",
    "Кольцо с рубином",
    "Кольцо с желтым бриллиантом",
    "Серебряное кольцо с фианитами",
    "Кольцо с ониксом",
    "Серьги с жемчугом",
    "Золотые серьги-капли",
    "Подвеска с аметистом",
    "Браслет из белого золота",
    "Кольцо с топазом",
    "Серебряные серьги-гвоздики",
    "Серебряные серьги-кольца",
    "Золотой браслет-цепочка",
    "Золотое кольцо с изумрудом",
    "Кулон с желтым бриллиантом",
    "Кулон с топазом",
    "Браслет из розового золота",
    "Серьги-гвоздики с топазом",
    "Кольцо с ониксом",
    "Кольцо с желтым сапфиром",
    "Серьги-гвоздики с рубином",
    "Золотые серьги-кольца",
    "Колье из белого золота",
    "Кольцо с белым бриллиантом",
    "Серебряные серьги-капли",
    "Золотое кольцо с топазом",
    "Кольцо с желтым топазом",
    "Браслет из желтого золота",
    "Подвеска с желтым бриллиантом",
    "Кулон с сапфиром",
    "Серебряный браслет-цепочка",
    "Золотые серьги-гвоздики с жемчугом",
    "Серебряные серьги-гвоздики с фианитами",
    "Кольцо с желтым сапфиром",
    "Золотой браслет-жгут" };
            string[] sportingGoods = new string[] {
    "Футбольный мяч",
    "Баскетбольный мяч",
    "Велосипед",
    "Шлем для велосипедистов",
    "Коньки",
    "Ролики",
    "Ласты для плавания",
    "Надувной матрас для плавания",
    "Теннисная ракетка",
    "Мяч для тенниса",
    "Ракетка для настольного тенниса",
    "Мяч для настольного тенниса",
    "Гантели",
    "Беговая дорожка",
    "Эллиптический тренажер",
    "Гимнастический мяч",
    "Коврик для йоги",
    "Батут",
    "Скакалка",
    "Боксерские перчатки",
    "Мешок для бокса",
    "Беговые кроссовки",
    "Тренажер для мышц живота",
    "Тренажер для мышц рук",
    "Тренажер для мышц ног",
    "Лыжные палки",
    "Лыжные ботинки",
    "Лыжи для катания на горных лыжах",
    "Сноуборд",
    "Защитный костюм для сноубординга",
    "Рюкзак для походов",
    "Термос",
    "Палатка для кемпинга",
    "Гриль для барбекю",
    "Бинокль",
    "Компас",
    "Термометр",
    "Фонарик",
    "Коньковый мешок",
    "Пояс для ходьбы на снегу",
    "Спортивные наушники",
    "Спортивная сумка",
    "Спортивные очки",
    "Беговой компьютер",
    "Набор для бодибилдинга",
    "Набор для йоги",
    "Роликовые коньки",
    "Спортивные штаны",
    "Шорты для бега",
    "Спортивные куртки"
};
            string[] healthProducts = new string[] {
    "Аптечка первой помощи",
    "Термометр для измерения температуры",
    "Ингалятор",
    "Растяжка для мышц",
    "Растяжка для спины",
    "Компрессионный бандаж для суставов",
    "Шипованные стельки",
    "Напольные весы",
    "Массажер для шеи",
    "Массажер для спины",
    "Массажер для ступней",
    "Электронный давление крови",
    "Кондиционер для воздуха",
    "Инфракрасная лампа для лечения",
    "Маникюрный набор",
    "Педикюрный набор",
    "Ортопедический матрас",
    "Ортопедическая подушка",
    "Ортопедические стельки",
    "Терапевтические чулки",
    "Скакалка для кардио-тренировок",
    "Электронный глюкометр",
    "Инвалидная коляска",
    "Костыли",
    "Широкие носки для диабетиков",
    "Очки для чтения",
    "Очки для работы за компьютером",
    "Очки для защиты от солнца",
    "Аппарат для очистки зубов",
    "Зубная нить",
    "Зубная щетка",
    "Зубная паста",
    "Маска для сна",
    "Ночник",
    "Корсет для спины",
    "Корсет для шеи",
    "Очищающий гель для лица",
    "Маска для лица",
    "Средство для ухода за волосами",
    "Крем для рук",
    "Крем для ног",
    "Средство для ухода за телом",
    "Противомоскитная сетка",
    "Противомоскитный репеллент",
    "Противомоскитные свечи",
    "Пояс для беременных",
    "Тест на беременность",
    "Витаминные комплексы",
    "Противозачаточные таблетки",
    "Лекарства от простуды"
};

            string[][] categories = new string[][]
            {
                appliances,food,clothes,stationery,cosmetics,furniture,toys,jewelry,sportingGoods,healthProducts
            };
            List<Product> products = new List<Product>();


            for (int i = 0; i < categories.Length; i++)
            {
                for (int j = 0; j < categories[i].Length; j++)
                {
                    Product product = new Product();
                    product.CategoryID = i + 1;
                    product.Name = categories[i][j];
                    product.Price = random.Next(1, 10000) + (decimal)Math.Round(random.NextDouble(), 2);
                    products.Add(product);
                }
            }

            Shuffle(products);

            this.products = products.Count;
            return products;
        }
        private List<AnOrder> GenerateOrders(int amount)
        {
            List<AnOrder> anOrders = new List<AnOrder>();
            for (int i = 0; i < amount; i++)
            {
                AnOrder order = new AnOrder();
                order.ClientID = random.Next(1, clients);
                order.OrderDate = GenerateRandomDateTime() ?? DateTime.Now;
                order.DeliveredDate = GenerateRandomDateTime(true);

                anOrders.Add(order);
            }
            anorders = anOrders.Count;
            return anOrders;
        }
        private List<ProductInOrder> GenerateProductsInOrders(int amount)
        {
            List<ProductInOrder> ProductInOrders = new List<ProductInOrder>();

            for (int i = 0; i < amount; i++)
            {
                ProductInOrder productInOrder = new ProductInOrder();
                productInOrder.ProductID = random.Next(1, products);
                productInOrder.OrderID = random.Next(1, anorders);

                var procent = random.Next(100);
                if (procent < 50)
                {
                    productInOrder.Amount = 1;
                }
                else if (procent < 90)
                {
                    productInOrder.Amount = random.Next(2, 10);
                }
                else
                {
                    productInOrder.Amount = random.Next(10, 100);
                }
            }
            return ProductInOrders;
        }
        private List<Review> GenerateReviews(int amount)
        {
            string[] positiveReviews = {
    "Отличный товар!",
    "Очень качественный товар!",
    "Превосходное качество!",
    "Прекрасный товар!",
    "Идеальный выбор!",
    "Этот товар - настоящее произведение искусства!",
    "Я использовал множество подобных товаров, но этот просто бесподобен!",
    "Это лучшая покупка, которую я сделал за последнее время!",
    "Отличный выбор за отличную цену!",
    "Я впервые в жизни получил столько удовольствия от покупки товара!",
    "Этот товар просто незаменим для меня!",
    "Мне было очень важно купить качественный товар, и я нашел его!",
    "Невероятно, но этот товар превзошел все мои ожидания!",
    "Я был приятно удивлен, что товар оказался настолько хорошим!",
    "Этот товар помог мне справиться с трудной задачей!",
    "Невероятно, но этот товар оказался лучшим из всех, которые я покупал!",
    "Такой товар - настоящий находка!",
    "Я получил массу удовольствия от покупки этого товара!",
    "Этот товар стал для меня открытием!",
    "Я давно хотел купить такой товар, и наконец нашел его!"
};
            string[] negativeReviews = {
    "Плохой товар!",
    "Очень низкое качество!",
    "Продукт плохо сделан!",
    "Ужасный выбор!",
    "Этот товар - настоящее разочарование!",
    "Я использовал множество подобных товаров, но этот просто ужасен!",
    "Это худшая покупка, которую я сделал за последнее время!",
    "Плохой выбор за завышенную цену!",
    "Я никогда не получал столько разочарования от покупки товара!",
    "Этот товар абсолютно бесполезен для меня!",
    "Мне было очень важно купить качественный товар, но я ошибся!",
    "Невероятно, но этот товар превзошел все мои ожидания в плохую сторону!",
    "Я был приятно удивлен, что товар оказался настолько плохим!",
    "Этот товар только создает трудности!",
    "Невероятно, но этот товар оказался худшим из всех, которые я покупал!",
    "Этот товар - полный отстой!",
"Такой товар - настоящее разочарование!",
"Я получил массу разочарования от покупки этого товара!",
"Этот товар оказался для меня настоящим разочарованием!",
"Я бы никогда не рекомендовал этот товар никому!",
"Я сожалею о своей покупке этого товара!",
"Этот товар - настоящая трата денег!"
};
            string[] neutralReviews = {
"Средний товар, ничего особенного.",
"Нормальное качество, но ничего сверхъестественного.",
"Нейтральный выбор, не плохой и не хороший.",
"Товар соответствует ожиданиям, но не более того.",
"Я не могу сказать, что этот товар удивил меня.",
"Я не могу рекомендовать этот товар, но и не отрицать его.",
"Ничего выдающегося в этом товаре я не нашел.",
"Я ожидал большего от этого товара, но он оказался обычным.",
"Нейтральный выбор за адекватную цену.",
"Среднее качество за среднюю цену.",
"Товар, который можно рассмотреть при отсутствии других вариантов.",
"Ничего выдающегося в этом товаре я не нашел, но он тоже не плохой.",
"Средний товар, который никак не выделяется.",
"Я не сильно впечатлен этим товаром, но он не вызывает отторжения.",
"Ничего особенного в этом товаре я не нашел, но он не плохой.",
"Этот товар не удивил меня ни в лучшую, ни в худшую сторону.",
"Этот товар не вызвал у меня ни положительных, ни отрицательных эмоций.",
"Среднее качество за завышенную цену.",
"Товар, который я купил из-за отсутствия лучших вариантов.",
"Нейтральный выбор, который я могу рекомендовать, но не очень сильно."
};
            List<Review> reviews = new List<Review>();
            for (int i = 0; i < amount; i++)
            {
                Review review = new Review();
                review.ClientID = random.Next(1, clients);
                review.ProductID = random.Next(1, products);
                review.ReviewDate = GenerateRandomDateTime() ?? DateTime.Now;

                var percent = random.Next(100);
                if (percent < 25)
                {
                    review.ReviewText = negativeReviews[random.Next(negativeReviews.Length)];
                    review.Rating = random.Next(1, 3);
                }
                else if (percent < 60)
                {
                    review.ReviewText = neutralReviews[random.Next(neutralReviews.Length)];
                    review.Rating = random.Next(3, 5);
                }
                else
                {
                    review.ReviewText = positiveReviews[random.Next(positiveReviews.Length)];
                    review.Rating = random.Next(4, 6);
                }
                reviews.Add(review);
            }
            this.reviews = reviews.Count;
            return reviews;
        }
        public EntitiesGenerator(int clients, int orders, int productsInOrders, int reviews)
        {
            Clients = GenerateClients(clients);
            Products = GenerateProducts();
            Orders = GenerateOrders(orders);
            productInOrders = GenerateProductsInOrders(productsInOrders);
            Reviews = GenerateReviews(reviews);
            Categories = GenerateCategories();
        }

        public List<Client> Clients = new List<Client>();
        public List<Product> Products = new List<Product>();
        public List<ProductInOrder> productInOrders = new List<ProductInOrder>();
        public List<AnOrder> Orders = new List<AnOrder>();
        public List<Review> Reviews = new List<Review>();
        public List<Category> Categories = new List<Category>();
    }
}
